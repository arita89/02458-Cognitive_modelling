clear all;
clc;
close all;

%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: /home/silvia-neurorobotics/Documents/cognitive_modeling/week11/Stimulus_presentation_script/results.txt
%
% Auto-generated by MATLAB on 14-Nov-2019 10:36:43

%% Setup the Import Options
results_file_path = "/home/silvia-neurorobotics/Documents/cognitive_modeling/week11/Stimulus_presentation_script/results.txt";
opts = delimitedTextImportOptions("NumVariables", 5);

% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["VarName1", "VarName2", "jpgchipjpg", "Notsmiling", "VarName5"];
opts.VariableTypes = ["double", "double", "string", "categorical", "double"];
opts = setvaropts(opts, 3, "WhitespaceRule", "preserve");
opts = setvaropts(opts, [3, 4], "EmptyFieldRule", "auto");
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
results = readtable(results_file_path, opts);


% Clear temporary variables
clear opts


%% Clean the data (remove data below 200ms and above 2 sec)
toDelete = results.VarName5 < 200*10^(-3);
results(toDelete,:) = [];
toDelete = results.VarName5 >2;
results(toDelete,:) = [];

%% From binary to continuos

% for each subject normalize the reaction time 
% quality of the answer from not very smiling to very smiling
user_id = [1,2];
zero_size_results = zeros(size(results,1),1);
results.VarName6 = zero_size_results;
for i = 1:1:size(user_id,2)
    dummy_user_id = results.VarName1 == user_id(i);
    m = mean(results(dummy_user_id,:).VarName5);
    results(dummy_user_id,:).VarName6 =  1-normalize(results(dummy_user_id,:).VarName5, 'range', [0 1]);
end

toChngsign = results.Notsmiling == 'Not smiling';
results(toChngsign,6).VarName6 = - results(toChngsign,:).VarName6;



%%
I_dim = 300;

plot_n = 1;
I_dim = 300;
size_patch = 10;
S_dim = I_dim/size_patch;
myFolder = '/home/silvia-neurorobotics/Documents/cognitive_modeling/week11/Stimulus_presentation_script/pictures';
if ~isdir(myFolder)
  errorMessage = sprintf('Error: The following folder does not exist:\n%s', myFolder);
  uiwait(warndlg(errorMessage));
  return;
end
filePattern = fullfile(myFolder, '*.jpg');
jpegFiles = dir(filePattern);
% S transformed matrix, 
S = [];
for k = 1:length(jpegFiles)
    baseFileName = jpegFiles(k).name;
    fullFileName = fullfile(myFolder, baseFileName);
    %fprintf(1, 'Now reading %s\n', fullFileName);
    I = imresize(rgb2gray(imread(fullFileName)),[I_dim, I_dim]);

   
    S(k,:) = reshape(double(I),[1,I_dim*I_dim]);
    
end
%%
% Principal Components
[X,W,latent,tsqu,explained] = pca(S);

% check how many eigenvalues are needed to have 95% variance
i = 0;
sum_variance = 0;
var_threshold = 95;
while sum_variance <= var_threshold
   i = i+1;
   sum_variance = sum_variance + explained(i);
end
n_pca = i;
% sub scores with that explains the 95%
W_sub = W(:,1:n_pca);
%%
figure(plot_n), 
subplot(1,2,1),bar(latent)
title( 'pca variance' )
grid on
subplot(1,2,2),bar(latent(1:6))
title( 'zoom pca variance' )
sgtitle(string(fig_title(figure_t)))
grid on
plot_n = plot_n+1;

%%
statarray = grpstats(results,'jpgchipjpg','mean','DataVars',{'VarName6'});
y_train   = statarray.mean_VarName6;
%%
rmse = @(X,Y) sqrt(immse(X,Y));
%%
components = [];
sequentialfs(@(x)rmse(x(1),x(2)), W_sub,y_train)